/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gestor2;

import java.util.Objects;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Javier Bravo
 */
public class MostrarContenido extends javax.swing.JFrame {

    static private String rutaArchivo;
    static private String password1;
    static private String selectedFilePath;

    /**
     * Creates new form MostrarContenido
     */
    public MostrarContenido (){
    };
    public MostrarContenido(String rutaArchivo, String password1, String selectedFilePath) {
        this.rutaArchivo = rutaArchivo;
        this.password1 = password1;
        this.selectedFilePath = selectedFilePath;
        initComponents();

        getContentPane().setBackground(new java.awt.Color(173, 216, 230)); // Este es el código para el color azul claro.
        setLocationRelativeTo(null);
        Tabla(llenarTabla(rutaArchivo));
    }

    // Método para llenar la tabla con datos desde un archivo .jj
    private int llenarTabla(String rutaArchivo) {
        int contador = 0;
        try {
            BufferedReader br = new BufferedReader(new FileReader(rutaArchivo));
            String linea;
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            while ((linea = br.readLine()) != null) {
                contador++;
                // Removemos los corchetes al inicio y al final
                linea = linea.substring(1, linea.length() - 1);

                // Dividimos la línea en partes: Usuario, Contraseña, URL, NombreWeb
                String[] partes = linea.split(",");
                String usuario = "";
                String contrasena = "";
                String url = "";
                String nombreWeb = "";
                for (int i = 0; i < partes.length; i++) {
                    switch (i) {
                        case 0:
                            usuario = partes[0].trim();
                            break;
                        case 1:
                            contrasena = partes[1].trim();
                            break;
                        case 2:
                            url = partes[2].trim();
                            break;
                        case 3:
                            nombreWeb = partes[3].trim();

                            break;
                        default:
                            throw new AssertionError();
                    }
                } 
                // Creamos una instancia de Datos_Gestor
                Datos_Gestor datos = new Datos_Gestor(usuario, contrasena, url, nombreWeb);
                // Añadimos los datos a la tabla
                model.addRow(new Object[]{contador, datos.getUsuario(), datos.getContrasena(), datos.getURL(), datos.getNombreWeb()});
            }

            br.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Error al leer el archivo: " + e.getMessage());
        }
        return contador;
    }

    private void guardarNuevoDato(String usuario, String contrasena, String url, String nombreWeb) {
        try {
            // Limpiar el archivo antes de escribir los nuevos datos
            //PrintWriter pw = new PrintWriter(rutaArchivo);
            //pw.close();

            // Abrir el archivo en modo append (agregar al final)
            BufferedWriter bw = new BufferedWriter(new FileWriter(rutaArchivo, true));

            // Escribir el nuevo dato en el formato adecuado
            if (!usuario.isEmpty() && !contrasena.isEmpty() && !url.isEmpty() && !nombreWeb.isBlank()) {
                bw.write("[" + usuario + "," + contrasena + "," + url + "," + nombreWeb + "]");
                bw.newLine();
            }
            // Cerrar el BufferedWriter
            bw.close();

        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Error al escribir en el archivo: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Guardar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Usuario", "Contraseña", "URL", "Nombre Web"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(30);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(30);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(30);
        }

        Guardar.setText("Guardar Cambios");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("GESTOR CIPHERGUARD");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(46, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 714, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Guardar)
                .addGap(326, 326, 326))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Guardar)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int numRows = model.getRowCount();

        // Verificar si hay una fila seleccionada
        if (numRows > 0) {
            try {
                // Limpiar el archivo antes de escribir los nuevos datos
                PrintWriter pw = new PrintWriter(rutaArchivo);
                pw.close();

                for (int i = 0; i < numRows; i++) {
                    String usuario = Objects.toString(model.getValueAt(i, 1), "");
                    String contrasena = Objects.toString(model.getValueAt(i, 2), "");
                    String url = Objects.toString(model.getValueAt(i, 3), "");
                    String nombreWeb = Objects.toString(model.getValueAt(i, 4), "");

                    System.out.println("Fila " + i + ": Usuario=" + usuario + ", Contraseña=" + contrasena + ", URL=" + url + ", NombreWeb=" + nombreWeb);

                    guardarNuevoDato(usuario, contrasena, url, nombreWeb);
                }

                JOptionPane.showMessageDialog(this, "Datos guardados correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                e.printStackTrace();
                System.out.println("Error al escribir en el archivo: " + e.getMessage());
                JOptionPane.showMessageDialog(this, "Error al guardar los datos.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "La tabla está vacía.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_GuardarActionPerformed

    private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowIconified

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        try {
            // Obtener la Clave secreta a partir de la contraseña almacenada
            SecretKeySpec secretKeyEncriptar = Gestorinterfaz.ObtenerKeyDeContrasena(this.password1);

            // Obtener el contenido del archivo actual
            File archivo = new File(selectedFilePath);
            byte[] contenido = Files.readAllBytes(archivo.toPath());

            // Encriptar el contenido usando AES 
            byte[] contenidoEncriptado = Gestorinterfaz.encriptar(contenido, secretKeyEncriptar);

            // Guardar el contenido encriptado en el mismo archivo
            Files.write(archivo.toPath(), contenidoEncriptado);

            System.out.println("Archivo encriptado antes de cerrar la aplicación.");
        } catch (Exception ex) {
            ex.printStackTrace();
            System.out.println("Error al encriptar el archivo antes de cerrar la aplicación: " + ex.getMessage());
        }
    }//GEN-LAST:event_formWindowClosing

    private void Tabla(int cont) {
        // Agregar filas al inicio
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (int i = 0; i <= 23; i++) {
            model.addRow(new Object[]{i+cont+1 ,"", "", "", ""});
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Guardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
